ReadPackage( "DerivedCategories", "examples/pre_settings.g" );
######################### start example #################################

# create graded polynomial ring
S := GradedRing( HomalgFieldOfRationalsInSingular( ) * "x0..2" );

# create subcategory of free graded modules of rank 1
free_of_ranke_one := FullSubcategoryGeneratedByGradedFreeModulesOfRankeOne( S );

# create the subcategory generated by {ùìû (i)|i=-2,-1,0}
o := SetOfKnownObjects( free_of_ranke_one );

full_1 := FullSubcategoryGeneratedByListOfObjects( [ o[-2], o[-1], o[0] ] );
full_2 := FullSubcategoryGeneratedByListOfObjects( [ o[-1], o[0], o[1] ] );

T := CapFunctor( " _ ‚äó S( 1 ) functor", full_1, full_2 );
AddObjectFunction( T,   o -> UnderlyingCell( UnderlyingCell( o ) )[ 1 ] / free_of_ranke_one / full_2 );
AddMorphismFunction( T, { s, m, r } -> UnderlyingCell( UnderlyingCell( m ) )[ 1 ] / free_of_ranke_one / full_2 );

T := ExtendFunctorToAdditiveClosureOfSource( T );
T := ExtendFunctorToHomotopyCategories( T );

# create a Beilinson functor
B := BeilinsonFunctorIntoHomotopyCategoryOfQuiverRows( S );
C := AsCapCategory( Range( B ) );

# restrict it to {ùìû (i)|i=-2,-1,0}
B_1 := RestrictFunctorIterativelyToFullSubcategoryOfSource( B, full_1 );
B_2 := RestrictFunctorIterativelyToFullSubcategoryOfSource( B, full_2 );

# compute the image of B_1 as full subcategory generated by list of objects
image_B_1 := ImageOfFullyFaithfullFunctor( B_1 );

# create strong full exceptional collection
collection_1 := CreateExceptionalCollection( image_B_1 );

# connect full_1 with image_B_1
V_1 := IsomorphismFromImageOfFullyFaithfulFunctor( B_1 );
V_1 := ExtendFunctorToAdditiveClosureOfSource( V_1 );
V_1 := ExtendFunctorToHomotopyCategories( V_1 );

# compute the image of B_2 as full subcategory generated by list of objects
image_B_2 := ImageOfFullyFaithfullFunctor( B_2 );

# connect full_2 with image_B_2
U_2 := IsomorphismIntoImageOfFullyFaithfulFunctor( B_2 );
U_2 := ExtendFunctorToAdditiveClosureOfSource( U_2 );
U_2 := ExtendFunctorToHomotopyCategories( U_2 );

# create strong full exceptional collection
collection_2 := CreateExceptionalCollection( image_B_2 );

TT := PreCompose(
        [
          ReplacementFunctor( collection_1 ),
          V_1,
          T,
          U_2,
          ConvolutionFunctor( collection_2 )
        ]
      );

#####################
quit;
S_0 := TwistedGradedFreeModule( S, 0 );
B_S_0 := B( S_0 );
HomStructure( B_S_0, TT( B_S_0 ) );
HomStructure( B_S_0, TT( TT( B_S_0 ) ) );

alpha := RandomMorphism( C, [[-2,2,2], [-2,2,2], [2]] );
IsZero( alpha );
beta := RandomMorphismWithFixedSource( Range( alpha ), [ [-2,2,2], [2] ] );
IsZero( beta );
CheckFunctoriality( TT, alpha, beta );
