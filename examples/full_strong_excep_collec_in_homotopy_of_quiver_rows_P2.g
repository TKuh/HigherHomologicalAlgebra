ReadPackage( "DerivedCategories", "examples/pre_settings.g" );
######################### start example #################################

# create graded polynomial ring
S := GradedRing( HomalgFieldOfRationalsInSingular( ) * "x0..2" );
rows := CategoryOfGradedRows( S );
freyd := FreydCategory( rows );

# create a Beilinson functor from Freyd category
B := BeilinsonFunctorIntoHomotopyCategoryOfQuiverRows( S );

# embedding of the rows in the fryed category
I := EmbeddingFunctorIntoFreydCategory( rows );

# restricte to graded rows
B := PreCompose( I, B );

# create the category defined by S(-2), S(-1), S(0)
full := FullSubcategoryGeneratedByListOfObjects( [ [-2]/rows, [-1]/rows, [0]/rows ] );

B := RestrictFunctorToFullSubcategoryOfSource( B, full );

# compute the image of B as full subcategory generated by list of objects
image_B := ImageOfFullyFaithfullFunctor( B );

# connect the two category full & image_B with functors
U := IsomorphismOntoImageOfFullyFaithfulFunctor( B );
U := ExtendFunctorToAdditiveClosureOfSource( U );
U := ExtendFunctorToHomotopyCategories( U );

V := IsomorphismFromImageOfFullyFaithfulFunctor( B );
V := ExtendFunctorToAdditiveClosureOfSource( V );
V := ExtendFunctorToHomotopyCategories( V );

# use the image to define a strong full exceptional collection
vertices_labels := [ "𝓞 (-2)", "𝓞 (-1)", "𝓞 (0)" ];
collection := CreateExceptionalCollection( image_B : vertices_labels := vertices_labels );

# embedd the ambient in some derived category where homology can be computed
D := EmbeddingFunctorFromAmbientCategoryIntoDerivedCategory( collection );


F := ConvolutionFunctorFromHomotopyCategoryOfQuiverRows( collection );
G := ReplacementFunctorIntoHomotopyCategoryOfQuiverRows( collection );

SF := SourceOfFunctor( F );
RF := RangeOfFunctor( F );

Tr_F := ExtendFunctorToCategoryOfTriangles( F );
Tr_G := ExtendFunctorToCategoryOfTriangles( G );

quit;

# create object in the ambient category
a := RandomObject( RF, [ -3, 3, 3 ] );

# take it by G and bring it back by F
FG_a := F(G(a));

# Embedding both of them in some derived category to compare homologies
D_a := D( a );
D_FG_a := D( FG_a );

# compute homologies
List( [ -3 .. 3 ], j -> [ HomologyAt( D_a, j ), HomologyAt( D_FG_a, j ) ] );

# create an exact triangle in the ambient category
alpha := RandomMorphism( RF, [ [-2,2,2], [-2,2,2], [2] ] );
st_alpha := StandardExactTriangle( alpha );
Tr_G_st_alpha := Tr_G( st_alpha );
IsWellDefined( Tr_G_st_alpha );
w := WitnessIsomorphismOntoStandardExactTriangle( Tr_G_st_alpha );
List( [ 0, 1, 2, 3 ], i -> IsIsomorphism( w[ i ] ) );

# create an exact triangle
alpha := RandomMorphism( SF, [ [-2,2,2], [-2,2,2], [2] ] );
st_alpha := StandardExactTriangle( alpha );
Tr_F_st_alpha := Tr_F( st_alpha );
IsWellDefined( Tr_F_st_alpha );
w := WitnessIsomorphismOntoStandardExactTriangle( Tr_F_st_alpha );
List( [ 0, 1, 2, 3 ], i -> IsIsomorphism( D( w[ i ] ) ) );
List( [ 0, 1, 2, 3 ], i -> IsIsomorphism( w[ i ] ) );

