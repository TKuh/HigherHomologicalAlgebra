#############################################################################
##
##  DerivedCategories: Derived categories for additive categories
##
##  Copyright 2019, Kamal Saleh, University of Siegen
##
#! @Chapter Exceptional collections
#!
#############################################################################



####################################
##
#! @Section Constructors
##
####################################

#! @Description
#! The GAP category of exceptional collections.
#! @Arguments object
#! @Returns true or false
DeclareCategory( "IsExceptionalCollection", IsObject );

#! @Description
#! If the input is full subcategory <A>A</A> in some category <C>C</C>, generated by finite number of objects <A>A!.Objects</A>, then the output is
#! the strong exceptional collection defined by these objects. If the input is a list of objects <A>L</A> of objects in some category <C>C</C>, 
#! then the output is <A>CreateExceptionalCollection( A )</A>, where <A>A := FullSubcategoryGeneratedByListOfObjects(C,L)</A>.
#! @Arguments objects
#! @Returns IsExceptionalCollection
DeclareGlobalFunction( "CreateExceptionalCollection" );

#! @Description
#! Returns the full subcategory that is generated by the elements of the strong exceptional collection <A>E</A>.
#! @Arguments objects
#! @Returns IsExceptionalCollection
DeclareAttribute( "DefiningFullSubcategory", IsExceptionalCollection );

#! @Description
#! Returns the number of objects of the exceptional collection <A>E</A>.
#! @Arguments E
#! @Returns IsInt
DeclareAttribute( "NumberOfObjects", IsExceptionalCollection );

#! @Description
#! Returns a list of the objects of the exceptional collection <A>E</A>.
#! @Arguments E
#! @Returns IsList
DeclareAttribute( "UnderlyingObjects", IsExceptionalCollection );

#! @Description
#! Returns the $i$'th object in <A>E</A>.
#! @Arguments E, i
#! @Returns IsList
DeclareOperation( "\[\]", [ IsExceptionalCollection, IsInt ] );

#! @Description
#! It returns a basis for the vector space of morphisms from $E_i$ to $E_j$ that can not be factored
#! along any other object in the exceptional collection.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "Arrows", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns a generating set for the vector space of morphisms from $E_i$ to $E_j$ that can be factored
#! along at least one object in the exceptional collection.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "OtherPaths", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns the union of <A>Arrows</A> and <A>OtherPaths</A> applied
#! on the same input. In other words it returns a generating set for the vector space Hom$(E_i,E_j)$.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "Paths", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns a basis for <A>Paths( E, i, j )</A>.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "BasisForPaths", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns labels for <A>Arrows( E, i, j )</A>.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "LabelsForArrows", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns labels for <A>OtherPaths( E, i, j )</A>.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "LabelsForOtherPaths", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns labels for <A>Paths( E, i, j )</A>.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "LabelsForPaths", [ IsExceptionalCollection, IsInt, IsInt ] );

#! @Description
#! It returns labels for <A>Paths( E, i, j )</A>.
#! @Arguments E, i, j
#! @Returns IsList
DeclareOperation( "LabelsForBasisForPaths", [ IsExceptionalCollection, IsInt, IsInt ] );

####################################
##
#! @Section General Operations
##
####################################

#! @Description
#! The input is a list of morphisms $(f_i:A\to B)$ for $i=1,\dots,n$ that live in 
#! a category equipped with homomorphism structure $(1,H(-,-),\nu)$. The output is
#! the morphism $\langle \nu(f_1),\nu(f_2),\dots,\nu(f_n)\rangle:\oplus_{i=1}^n 1 \to H(A,B)$.
#! @Arguments A, B, morphisms
#! @Returns IsCapCategoryMorphism
DeclareOperation( "InterpretListOfMorphismsAsOneMorphismInRangeCategoryOfHomomorphismStructure",
    [ IsCapCategoryObject, IsCapCategoryObject, IsList ] );

#! @Description
#! It returns a quiver algebra with $m$ vertices and $n$ arrows and whose indecomposable 
#! projective or injective objects defines an exceptional collection.
#! @Arguments m, n
#! @Returns IsQuiverAlgebra
DeclareGlobalFunction( "RandomQuiverAlgebraWhoseIndecProjectiveRepsAreExceptionalCollection" );

#! @Description
#! It returns a quiver algebra whose vertices correspond to the objects of the <A>E</A> and whose elements
#! correspond to all possible compositions of morphisms between objects in <A>E</A>.
#! @Arguments E, field
#! @Returns IsQuiverAlgebra
DeclareGlobalFunction( "QuiverAlgebraFromExceptionalCollection" );


#! @Description
#! It returns the relations between the morphisms.
#! @Arguments morphisms
#! @Returns IsList
DeclareGlobalFunction( "RelationsBetweenMorphisms" );


##
DeclareOperation( "IsomorphismFromFullSubcategoryGeneratedByECToAlgebroid",
      [ IsExceptionalCollection, IsAlgebroid ] );


